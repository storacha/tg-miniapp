name: Deploy
on:
  push:
    branches:
      - 'main'
  pull_request:
    branches:
      - 'main'
jobs:
  test:
    uses: ./.github/workflows/test.yml

  preview:
    name: Preview
    needs:
      - test
    runs-on: ubuntu-latest
    permissions:
      pull-requests: write
    environment:
      name: ${{ (github.ref_name == 'main') && 'staging' || format('preview-{0}', github.ref_name) }}
      url: ${{ (github.ref_name == 'main') && 'https://tg-miniapp-staging.pages.dev' || steps.cloudflare_url.outputs.stdout }}
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v3
      - uses: ./.github/actions/pnpm
      - name: create .env from .env.tpl setting env variables used by `pnpm run pages:build`
        run: |
          # set env vars from template

          # omit these because they are added manually in the next step          
          function excludeDefaultServiceVariables() {
            cat - | grep -v NEXT_PUBLIC_STORACHA_SERVICE_
          }

          # set .env from .env.tpl with exclusions
          cat .env.tpl | excludeDefaultServiceVariables > .env

          # add vars configuring us to use staging Storacha as backend
          echo "NEXT_PUBLIC_STORACHA_SERVICE_DID=did:web:staging.web3.storage" >> .env
          echo "NEXT_PUBLIC_STORACHA_SERVICE_URL=https://staging.up.storacha.network" >> .env
          echo "NEXT_PUBLIC_STORACHA_RECEIPTS_URL=https://staging.up.storacha.network/receipt/" >> .env
          echo "NEXT_PUBLIC_STORACHA_PROVIDER=did:web:staging.web3.storage" >> .env
          echo "NEXT_PUBLIC_STORACHA_GATEWAY_HOSTNAME=ipfs-staging.w3s.link" >> .env
          echo "NEXT_PUBLIC_STORACHA_GATEWAY_ID=did:web:ipfs-staging.w3s.link" >> .env
          echo "NEXT_PUBLIC_SENTRY_ENV=staging" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}" >> .env
          echo "NEXT_PUBLIC_VERSION=$(cd .. && npm pkg get version)" >> .env
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
      # as long as this uses https://github.com/cloudflare/next-on-pages/blob/dc529d7efa8f8568ea8f71b5cdcf78df89be6c12/packages/next-on-pages/bin/index.js,
      # env vars won't get passed through to wrangler, so if wrangler will need them, write them to .env like the previous step
      - run: pnpm pages:build
      - name: Deploy preview build to Cloudflare Pages
        id: cloudflare
        run: | 
              {
                echo 'WRANGLER_OUTPUT<<EOF'
                pnpm wrangler pages deploy --project-name "$CLOUDFLARE_PAGES_PROJECT_NAME" --branch "$GITHUB_REF_NAME" --commit-hash "$GITHUB_SHA" .vercel/output/static
                echo EOF
              } >> "$GITHUB_OUTPUT"
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
          CLOUDFLARE_PAGES_PROJECT_NAME: ${{ (github.ref_name == 'main') && 'tg-miniapp-staging' || 'tg-miniapp-preview' }}
          NODE_ENV: ${{ secrets.NODE_ENV }}
          PORT: ${{ secrets.PORT }}
          MONGODB_URI: ${{ secrets.MONGODB_URI }}
          TELEGRAM_API_ID: ${{ secrets.TELEGRAM_API_ID }}
          TELEGRAM_API_HASH: ${{ secrets.TELEGRAM_API_HASH }}
          TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}
          CLIENT_URL: ${{ secrets.CLIENT_URL }}
          SERVER_PRINCIPAL: ${{ secrets.SERVER_PRINCIPAL }}
          POINTS_PER_BYTE: ${{ secrets.POINTS_PER_BYTE }}
          ENCRYPT_KEY: ${{ secrets.ENCRYPT_KEY }}
      - name: Find Cloudflare Pages preview URL
        uses: mathiasvr/command-output@v1.1.0
        id: cloudflare_url
        with:
          run: egrep -o 'https?://[^ ]+' <(echo "${{ steps.cloudflare.outputs.WRANGLER_OUTPUT }}")
      - name: Find Current Pull Request
        uses: jwalton/gh-find-current-pr@v1.3.0
        id: finder
      - name: Update Preview URLs PR Comment
        uses: marocchino/sticky-pull-request-comment@v2.2.0
        with:
          number: ${{ steps.finder.outputs.pr }}
          message: |
            ### Website preview 🔗✨
            - ⛅️ ${{ steps.cloudflare_url.outputs.stdout }}

            [build log](/${{ github.repository }}/actions/runs/${{ github.run_id }})
      - name: Add Preview URLs as Job Summary
        run: |
          echo "
          ### Website preview 🔗✨
            - ⛅️ ${{ steps.cloudflare_url.outputs.stdout }}

            [build log](/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY

  changelog:
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    name: Changelog
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
    outputs:
      releases_created: ${{ steps.tag-release.outputs.releases_created }}
    steps:
      - uses: GoogleCloudPlatform/release-please-action@v3
        id: tag-release
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          release-type: node
          monorepo-tags: true
          changelog-types: '[{"type":"feat","section":"Features","hidden":false},{"type":"fix","section":"Bug Fixes","hidden":false},{"type":"chore","section":"Other Changes","hidden":false}]'

  release:
    name: Release
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main' && needs.changelog.outputs.releases_created)
    runs-on: ubuntu-latest
    environment:
      name: production
      url: https://tg-miniapp-production.pages.dev/
    needs:
      - test
      - changelog
    defaults:
      run:
        working-directory: ./app
    steps:
      - uses: actions/checkout@v3
        with:
          ref: 'main'
      - uses: ./.github/actions/pnpm
      - name: create .env from .env.tpl setting env variables used by `pnpm run pages:build`
        run: |
          # set env vars from template

          # omit these because they are added manually in the next step          
          function excludeDefaultServiceVariables() {
            cat - | grep -v NEXT_PUBLIC_STORACHA_SERVICE_
          }

          # set .env from .env.tpl with exclusions
          cat .env.tpl | excludeDefaultServiceVariables > .env

          # add vars configuring the app to use production Storacha
          echo "NEXT_PUBLIC_STORACHA_SERVICE_DID=did:web:web3.storage" >> .env
          echo "NEXT_PUBLIC_STORACHA_SERVICE_URL=https://up.storacha.network" >> .env
          echo "NEXT_PUBLIC_STORACHA_RECEIPTS_URL=https://up.storacha.network/receipt/" >> .env
          echo "NEXT_PUBLIC_STORACHA_GATEWAY_HOSTNAME=ipfs.w3s.link" >> .env
          echo "NEXT_PUBLIC_STORACHA_GATEWAY_ID=did:web:w3s.link" >> .env
          echo "NEXT_PUBLIC_IPFS_GATEWAY_URL=https://%ROOT_CID%.ipfs.w3s.link" >> .env
          echo "NEXT_PUBLIC_SENTRY_ENV=production" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_API_ID=${{ secrets.TELEGRAM_API_ID }}" >> .env
          echo "NEXT_PUBLIC_TELEGRAM_API_HASH=${{ secrets.TELEGRAM_API_HASH }}" >> .env
          echo "NEXT_PUBLIC_VERSION=$(cd .. && npm pkg get version)" >> .env
          echo "SENTRY_AUTH_TOKEN=${{ secrets.SENTRY_AUTH_TOKEN }}" >> .env
      - run: pnpm pages:build
        # as long as this uses https://github.com/cloudflare/next-on-pages/blob/dc529d7efa8f8568ea8f71b5cdcf78df89be6c12/packages/next-on-pages/bin/index.js,
        # env vars won't get passed through to wrangler, so if wrangler will need them, write them to .env like the previous step
        env: {}
      - name: Deploy production build to Cloudflare Pages
        id: cloudflare
        run: pnpm wrangler pages deploy --project-name tg-miniapp-production --branch "main" --commit-hash "$GITHUB_SHA" .vercel/output/static
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CF_TOKEN }}
          CLOUDFLARE_ACCOUNT_ID: ${{ secrets.CF_ACCOUNT_ID }}
